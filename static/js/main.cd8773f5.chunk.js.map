{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","state","squares","Array","fill","xIsNext","i","this","map","item","idx","renderSquare","grid","count","row","j","push","React","Component","Game","history","lastMove","stepNumber","step","setState","slice","length","calculateWinner","concat","parseInt","status","current","winner","moves","move","desc","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd8773f5.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nfunction Square(props) {\n    return (\n        <button className=\"square\" onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n/*\n//class component\nclass Square extends React.Component {\n    render() {\n        return (\n            <button\n                className=\"square\"\n                onClick={() => {\n                    this.props.onClick();\n                }}\n            >\n                {this.props.value}\n            </button>\n        );\n    }\n}\n*/\n\nclass Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            squares: Array(9).fill(null),\n            xIsNext: true,\n        };\n    }\n    renderSquare(i) {\n        return (\n            <Square\n                value={this.props.squares[i]}\n                onClick={() => this.props.onClick(i)}\n                key={i}\n            />\n        );\n    }\n\n    render() {\n        const listOfNines = Array(9);\n        listOfNines.map((item, idx) => {\n            return this.renderSquare(idx);\n        });\n        const grid = [];\n        let count = 0;\n        for (let i = 0; i < 3; ++i) {\n            const row = [];\n            for (let j = 0; j < 3; ++j) {\n                row.push(this.renderSquare(count));\n                count++;\n            }\n            grid.push(\n                <div className=\"board-row\" key={i}>\n                    {row}\n                </div>\n            );\n        }\n\n        return <div>{grid}</div>;\n    }\n}\n\nclass Game extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            history: [{ squares: Array(9).fill(null), lastMove: [-1, -1] }],\n            stepNumber: 0,\n            xIsNext: true,\n        };\n    }\n    jumpTo(step) {\n        this.setState({\n            stepNumber: step,\n            xIsNext: step % 2 === 0,\n        });\n    }\n    handleClick(i) {\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\n        const current = history[history.length - 1];\n        const squares = current.squares.slice();\n\n        if (squares[i] || calculateWinner(squares)) return;\n        squares[i] = this.state.xIsNext ? \"X\" : \"O\";\n        //Square components re-render auto and Game has full control\n        // over square components known as controlled com=ponenets.\n        this.setState({\n            history: history.concat([\n                {\n                    squares: squares,\n                    lastMove: [(i % 3) + 1, parseInt(i / 3) + 1],\n                },\n            ]),\n            xIsNext: !this.state.xIsNext,\n            stepNumber: history.length, //history here is local variable referrin to old unconcatenated history, another advantage of immutability approach\n        });\n    }\n\n    render() {\n        const history = this.state.history;\n        const current = history[this.state.stepNumber];\n        const winner = calculateWinner(current.squares);\n\n        const moves = history.map((step, move) => {\n            let desc = move\n                ? `Go to game #${move} col: ${step.lastMove[0]} row: ${step.lastMove[1]}`\n                : \"Go to game start\";\n            const stepNumber = this.state.stepNumber;\n            desc = move === stepNumber ? <b> {desc} </b> : desc;\n            return (\n                <li key={move}>\n                    <button onClick={() => this.jumpTo(move)}> {desc} </button>\n                </li>\n            );\n        });\n\n        let status;\n\n        if (winner) status = \"WINNER: \" + winner;\n        else\n            status = status =\n                \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\n\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board\n                        squares={current.squares}\n                        onClick={(i) => {\n                            this.handleClick(i);\n                        }}\n                    />\n                </div>\n                <div className=\"game-info\">\n                    <div>{status}</div>\n                    <ol>{moves}</ol>\n                </div>\n            </div>\n        );\n    }\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (\n            squares[a] &&\n            squares[a] === squares[b] &&\n            squares[a] === squares[c]\n        ) {\n            return squares[a];\n        }\n    }\n    return null;\n}\n"],"sourceRoot":""}